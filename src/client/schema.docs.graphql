schema {
  query: GibsonsLeagueQuery
}

type GibsonsLeagueQuery {
  draft(year: Int): Draft
  draftpicks(
    offset: Int = 0
    limit: Int = 1000
    year: Int
    franchiseId: Guid
  ): [DraftPick]
  franchise(id: Guid, name: String): Franchise
  franchises: [Franchise]
  league(id: Guid, name: String = "Gibsons League"): League
  leagues: [League]
  matches(
    offset: Int = 0
    limit: Int = 1000
    type: MatchType
    franchiseId: Guid
    year: Int
    week: Int
  ): [Match]
  player(id: Int, name: String): Player
  players(
    offset: Int = 0
    limit: Int = 10
    query: String
    position: String
  ): [Player]
  season(year: Int, franchiseId: Guid): Season
  trade(id: Guid): FranchiseTrade
  trades(
    offset: Int = 0
    limit: Int = 100
    franchiseId: Guid
    year: Int
  ): [FranchiseTrade]
  transactions(
    offset: Int = 0
    limit: Int = 1000
    type: TransactionType
    year: Int
    franchiseId: Guid
  ): [PlayerTransaction]
}

type League {
  draft(year: Int!): Draft
  drafts: [Draft]
  franchises: [Franchise]
  leagueId: ID!
  name: String!
  records(number: Int! = 1, positivity: Boolean): [LeagueRecords]
  seasons(year: Int, finished: Boolean): [Season]
  startYear: Int
  teamstrength(
    startyear: Int
    endyear: Int
    champion: Boolean
    standing: Int = 1
  ): [TeamStrength]
}

type Franchise {
  addCount: Int
  championships: Int
  dropCount: Int
  franchiseId: ID!
  legends: [Legend]
  loses: Int
  mainName: String!
  matches(
    offset: Int
    limit: Int
    type: MatchType
    year: Int
    week: Int
  ): [Match]
  picks(offset: Int, limit: Int, year: Int, round: Int, pick: Int): [DraftPick]
  points: Float
  runnerUps: Int
  teams(year: Int): [Team]
  ties: Int
  tradeCount: Int
  trades(offset: Int, limit: Int): [FranchiseTrade]
  wins: Int
}

type Team {
  champion: Boolean!
  franchiseId: ID!
  franchiseName: String!
  loses: Int!
  matches(type: MatchType, week: Int): [Match]
  name: String!
  owner: String!
  points: Float!
  secondPlace: Boolean!
  standing: Int!
  ties: Int!
  wins: Int!
  yahooTeamId: Int
  year: Int!
}

type Match {
  losingFranchise: String!
  losingFranchiseId: ID!
  losingFranchisePoints: Float!
  losingFranchiseProjectedPoints: Float
  tied: Boolean!
  type: String
  week: Int!
  winningFranchise: String!
  winningFranchiseId: ID!
  winningTeamPoints: Float!
  winningTeamProjectedPoints: Float
  year: Int!
}

enum MatchType {
  REGULAR
  PLAYOFF
  CONSOLATION
  CHAMPIONSHIP
}

type DraftPick {
  draftId: ID!
  franchiseId: ID!
  franchiseName: String!
  gamesPlayed: Int
  pick: Int!
  playerId: Int!
  playerName: String!
  playerPosition: String!
  playerPositionRank: Int
  playerPositionRankPpg: Int
  playerPrimaryPosition: String!
  points: Float
  positionPick: Int!
  round: Int!
  year: Int!
}

type FranchiseTrade {
  date: DateTime!
  franchiseId: ID!
  franchiseName: String!
  tradedaway: [PlayerTransaction]
  tradedfor: [PlayerTransaction]
  tradedWithFranchiseId: Guid
  tradedWithFranchiseName: String
  tradeId: ID!
}

# The `DateTime` scalar type represents a date and time. `DateTime` expects timestamps to be formatted in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar DateTime

scalar Guid

type PlayerTransaction {
  date: DateTime!
  description: String!
  franchiseId: ID!
  franchiseName: String!
  name: String!
  playerId: Int!
  playerTransactionIndex: Int!
  position: String!
  positionRank: Float
  positionRankPpg: Float
  primaryPosition: String!
  related: [PlayerTransaction]
  seasonGamesPlayed: Float
  seasonPoints: Float
  transactionGroupId: Guid
  transactionId: ID!
  tree: [PlayerTransaction]
  type: String
  year: Int!
}

type Legend {
  player: Player
  points: Float!
  years: [Int!]!
}

type Player {
  avgPositionRank: Float
  avgPositionRankPpg: Float
  comparisonSeasons: [PlayerSeason]
  gamesPlayed: Int
  name: String!
  playerId: Int!
  points: Float
  pointsPerGame: Float
  pointsPerSeason: Float
  position: String!
  primaryPosition: String!
  seasons(year: Int): [PlayerSeason]
  seasonsCount: Int
  transactions(
    type: TransactionType
    offset: Int
    limit: Int
  ): [PlayerTransaction]
  yahooPlayerId: Int
}

type PlayerSeason {
  endfranchise: String
  endfranchisecolor: String
  gamesPlayed: Int!
  name: String!
  playerId: Int!
  points: Float!
  position: String!
  positionRank: Int!
  positionRankPpg: Int!
  primaryPosition: String!
  transactions(
    type: TransactionType
    offset: Int
    limit: Int
  ): [PlayerTransaction]
  year: Int!
}

enum TransactionType {
  DRAFT_PICKED
  KEPT
  ADDED
  DROPPED
  TRADED
  VETOED_TRADE
}

type Draft {
  date: Date
  draftId: ID!
  picks(offset: Int, limit: Int, round: Int, pick: Int): [DraftPick]
  rounds: Int!
  snake: Boolean!
  year: Int!
}

# The `Date` scalar type represents a year, month and day in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar Date

type LeagueRecords {
  positiveRecord: Boolean!
  recordTitle: String!
  top: [LeagueRecord]
  type: String
}

type LeagueRecord {
  franchiseId: Guid
  franchiseName: String
  otherFranchiseId: Guid
  otherFranchiseName: String
  playerId: Int
  playerName: String
  playerPosition: String
  rank: Int!
  recordNumericValue: Float!
  recordValue: String!
  week: Int
  year: Int
}

type Season {
  draftImported: Boolean
  finished: Boolean
  keepersSet: Boolean
  lastTransactionSyncDate: DateTime
  matchupSyncWeek: Int
  positionComparison: [PlayerSeason]
  teams: [Team]
  yahooGameId: Int
  yahooLeagueId: Int
  year: Int!
}

type TeamStrength {
  p1: String
  p2: String
  p3: String
  p4: String
  position: String!
}
